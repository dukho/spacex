apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "androidx.navigation.safeargs"

android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tool_version

    defaultConfig {
        applicationId "com.nomadworks.spacex"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode appVersionCode()
        versionName appVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    androidExtensions {
        experimental = true
    }

    buildFeatures {
        dataBinding = true
    }

    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix = ".dev"
            buildConfigField("String", "API_KEY", "\"key-dev\"")
        }

        uat {
            dimension "environment"
            applicationIdSuffix = ".uat"
            buildConfigField("String", "API_KEY", "\"key-uat\"")
        }

        mock {
            dimension "environment"
            applicationIdSuffix = ".mock"
            buildConfigField("String", "API_KEY", "\"key-mock\"")
        }

        prod {
            dimension "environment"
            buildConfigField("String", "API_KEY", "\"key-prod\"")
        }
    }
    signingConfigs {
        release {
            keyAlias 'release'
            keyPassword project.hasProperty('releaseKeyPass') ? project.properties['releaseKeyPass'] : System.getenv('releaseKeyPass')
            storeFile file('nomadProd.keystore')
            storePassword project.hasProperty('releaseKeyPass') ? project.properties['releaseKeyPass'] : System.getenv('releaseKeyPass')
        }
        debug {
            keyAlias 'test'
            keyPassword 'nomadTest123'
            storeFile file('nomadDebug.keystore')
            storePassword 'nomadTest123'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def flavor = variant.productFlavors[0].name
            def buildType = variant.buildType.name
            outputFileName = generateOutputFileName(flavor, buildType)
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'META-INF/proguard/coroutines.pro'
        exclude 'META-INF/*'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "androidx.appcompat:appcompat:$androidx_version"
    implementation "com.google.android.material:material:$androidx_version"
    implementation "androidx.cardview:cardview:$androidx_cardview_version"
    implementation "androidx.recyclerview:recyclerview:$androidx_version"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.lifecycle:lifecycle-extensions:$arch_lifecycle_extensions_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$arch_lifecycle_extensions_version"
    implementation "androidx.core:core-ktx:$ktx_version"

    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_ktx_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_ktx_version"

    // Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_version"

    // Nav - Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Dynamic Feature Module Support with Nav
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // DI
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_lifecycle_viewmodel"

    // Logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit2_version"

    // RX
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxrelay_version"
    implementation "com.tomasznajda.ktx:rxjava2:$rxjavaktx_version"

    // Annotation processor
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$arch_lifecycle_version"
    kapt "androidx.room:room-compiler:$room_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_lifecycle_viewmodel"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$dagger_version"

    // Test
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "androidx.arch.core:core-testing:$arch_lifecycle_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutine_version"

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
}

def static generateOutputFileName(flavor, buildType) {
    def project = "spacex"
    def SEP = "-"
    def version = appVersionName()
    def code = appVersionCode()
    project + SEP + flavor + SEP + buildType + SEP + "v" + version + SEP + "b" + code + ".apk"
}

def static appVersionCode() {
    1
}

def static appVersionName() {
    '1.0.0'
}

task apkFileName {
    group = 'Build'
    description = 'Produces a apk file name with given flavor and buildType (ex: ./gradlew apkFileName -Pflavor=prod -PbuildType=debug)'
    doLast {
        println(generateOutputFileName(flavor, buildType))
        println(System.getenv('releaseKeyPass'))
        new File(projectDir, "artifact_name.txt").text = generateOutputFileName(flavor, buildType)
    }
}

task saveCert(type: Exec) {
    group = 'Build'
    description = 'Save cert file'
    workingDir = '.'
    commandLine = './savecert.sh'
}